-- programs ------------------------------------------------

entrypoints Prog ;

Program.   Prog ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Blk ;

separator nonempty TopDef "" ;

Argument.  Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Blk ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Blk ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Expr "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Dimension.  Dim ::= "[]" ;

Int.       Type1 ::= "int" ;

Doub.      Type1 ::= "double" ;

Bool.      Type1 ::= "boolean" ;

Void.      Type1 ::= "void" ;

Arr.       Type ::= Type1 [Dim] ;

internal StringLit. Type ::= "string" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

coercions  Type 1 ;
separator  Type "," ;
separator nonempty Dim "";

-- Expressions ---------------------------------------------

-- Note: Lifted EArrNew, EVar, EApp to Expr7 (highest precedence) so that we only can index those.
-- See EDim. below
-- Note: Changed EDim + EVar to 8 so that we can only assign to those.
-- TODO: Might restrict even more so we can't type new int[2] = 2;

ExpDimen.       ExpDim ::= "[" Expr3 "]" ;
ExpDimenEmpty.  ExpDim ::= Dim ;

EArrNew.    Expr7 ::= "new" Type1 ;

EDim.       Expr8 ::= Expr7 ExpDim ;

EArrLen.    Expr6 ::= Expr6 "." Ident ;

EVar.       Expr8 ::= Ident ;

ELitInt.    Expr6 ::= Integer ;

ELitDoub.   Expr6 ::= Double;

ELitTrue.   Expr6 ::= "true" ;

ELitFalse.  Expr6 ::= "false" ;

EApp.       Expr7 ::= Ident "(" [Expr] ")" ;

EString.    Expr6 ::= String ;

Neg.        Expr5 ::= "-" Expr6 ;

Not.        Expr5 ::= "!" Expr6 ;

EMul.       Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;

ERel.       Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

internal ETyped. Expr ::= "[" Expr ":" Type "]" ;

coercions  Expr 8 ;

separator  Expr "," ;
--separator  EDim "" ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

